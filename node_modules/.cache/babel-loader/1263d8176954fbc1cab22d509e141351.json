{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Amos/Desktop/manage-it/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/Amos/Desktop/manage-it/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ADD_CONTACT,DELETE_CONTACT,SET_CURRENT,CLEAR_CURRENT,FILTER_CONTACTS,CLEAR_FILTER,UPDATE_CONTACT,GET_CONTACTS,CLEAR_CONTACTS,CONTACT_ERROR}from'../types';// eslint-disable-next-line\nexport default(function(state,action){switch(action.type){case GET_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:action.payload,loading:false});case ADD_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:[].concat(_toConsumableArray(state.contacts),[action.payload]),loading:false});case UPDATE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:state.contacts.map(function(contact){return contact._id===action.payload._id?action.payload:contact;}),loading:false});case DELETE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:state.contacts.filter(function(contact){return contact._id!==action.payload;}),loading:false});case CLEAR_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:null,filter:null,current:null,error:null});case CONTACT_ERROR:return _objectSpread(_objectSpread({},state),{},{error:action.payload});case SET_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:action.payload});case CLEAR_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:null});case FILTER_CONTACTS:return _objectSpread(_objectSpread({},state),{},{filtered:state.contacts.filter(function(contact){var regex=new RegExp(\"\".concat(action.payload),'gi');return contact.name.match(regex)||contact.email.match(regex);})});case CLEAR_FILTER:return _objectSpread(_objectSpread({},state),{},{filtered:null});default:return state;}});","map":{"version":3,"sources":["C:/Users/Amos/Desktop/manage-it/client/src/context/contact/contatcReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","FILTER_CONTACTS","CLEAR_FILTER","UPDATE_CONTACT","GET_CONTACTS","CLEAR_CONTACTS","CONTACT_ERROR","state","action","type","contacts","payload","loading","map","contact","_id","filter","current","error","filtered","regex","RegExp","name","match","email"],"mappings":"iUAAA,OACIA,WADJ,CAEIC,cAFJ,CAGIC,WAHJ,CAIIC,aAJJ,CAKIC,eALJ,CAMIC,YANJ,CAOIC,cAPJ,CAQIC,YARJ,CASIC,cATJ,CAUIC,aAVJ,KAWO,UAXP,CAaA;AACA,eAAe,SAACC,KAAD,CAAQC,MAAR,CAAmB,CAC9B,OAAOA,MAAM,CAACC,IAAd,EACI,IAAKL,CAAAA,YAAL,CACI,sCACOG,KADP,MAEIG,QAAQ,CAAEF,MAAM,CAACG,OAFrB,CAGIC,OAAO,CAAE,KAHb,GAKJ,IAAKf,CAAAA,WAAL,CACI,sCACOU,KADP,MAEIG,QAAQ,8BAAMH,KAAK,CAACG,QAAZ,GAAsBF,MAAM,CAACG,OAA7B,EAFZ,CAGIC,OAAO,CAAE,KAHb,GAKJ,IAAKT,CAAAA,cAAL,CACI,sCACOI,KADP,MAEIG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeG,GAAf,CAAmB,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAAP,CAAeI,GAA/B,CAAqCP,MAAM,CAACG,OAA5C,CAAsDG,OAA1D,EAA1B,CAFd,CAGIF,OAAO,CAAE,KAHb,GAKJ,IAAKd,CAAAA,cAAL,CACI,sCACOS,KADP,MAEIG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeM,MAAf,CAAsB,SAAAF,OAAO,QAAIA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAA3B,EAA7B,CAFd,CAGIC,OAAO,CAAE,KAHb,GAKJ,IAAKP,CAAAA,cAAL,CACI,sCACOE,KADP,MAEIG,QAAQ,CAAE,IAFd,CAGIM,MAAM,CAAE,IAHZ,CAIIC,OAAO,CAAE,IAJb,CAKIC,KAAK,CAAE,IALX,GAOJ,IAAKZ,CAAAA,aAAL,CACI,sCACOC,KADP,MAEIW,KAAK,CAAEV,MAAM,CAACG,OAFlB,GAIJ,IAAKZ,CAAAA,WAAL,CACI,sCACOQ,KADP,MAEIU,OAAO,CAAET,MAAM,CAACG,OAFpB,GAIJ,IAAKX,CAAAA,aAAL,CACI,sCACOO,KADP,MAEIU,OAAO,CAAE,IAFb,GAIJ,IAAKhB,CAAAA,eAAL,CACI,sCACOM,KADP,MAEIY,QAAQ,CAAEZ,KAAK,CAACG,QAAN,CAAeM,MAAf,CAAsB,SAAAF,OAAO,CAAI,CACvC,GAAMM,CAAAA,KAAK,CAAG,GAAIC,CAAAA,MAAJ,WAAcb,MAAM,CAACG,OAArB,EAAgC,IAAhC,CAAd,CACA,MAAOG,CAAAA,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,GAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC,CACH,CAHS,CAFd,GAOJ,IAAKlB,CAAAA,YAAL,CACI,sCACOK,KADP,MAEIY,QAAQ,CAAE,IAFd,GAIJ,QACI,MAAOZ,CAAAA,KAAP,CA9DR,CAgEH,CAjED","sourcesContent":["import {\r\n    ADD_CONTACT,\r\n    DELETE_CONTACT,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT,\r\n    FILTER_CONTACTS,\r\n    CLEAR_FILTER,\r\n    UPDATE_CONTACT,\r\n    GET_CONTACTS,\r\n    CLEAR_CONTACTS,\r\n    CONTACT_ERROR\r\n} from '../types';\r\n\r\n// eslint-disable-next-line\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case GET_CONTACTS:\r\n            return {\r\n                ...state,\r\n                contacts: action.payload,\r\n                loading: false\r\n            }\r\n        case ADD_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: [...state.contacts, action.payload],\r\n                loading: false\r\n            }\r\n        case UPDATE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\r\n                loading: false\r\n            }\r\n        case DELETE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact._id !== action.payload),\r\n                loading: false\r\n            }\r\n        case CLEAR_CONTACTS:\r\n            return {\r\n                ...state,\r\n                contacts: null,\r\n                filter: null,\r\n                current: null,\r\n                error: null\r\n            }\r\n        case CONTACT_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        case SET_CURRENT:\r\n            return {\r\n                ...state,\r\n                current: action.payload\r\n            }\r\n        case CLEAR_CURRENT:\r\n            return {\r\n                ...state,\r\n                current: null\r\n            }\r\n        case FILTER_CONTACTS:\r\n            return {\r\n                ...state,\r\n                filtered: state.contacts.filter(contact => {\r\n                    const regex = new RegExp(`${action.payload}`, 'gi');\r\n                    return contact.name.match(regex) || contact.email.match(regex);\r\n                })\r\n            }\r\n        case CLEAR_FILTER:\r\n            return {\r\n                ...state,\r\n                filtered: null\r\n            }\r\n        default:\r\n            return state;   \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}